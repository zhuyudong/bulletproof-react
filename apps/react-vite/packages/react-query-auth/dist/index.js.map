{"version":3,"sources":["../src/index.tsx"],"sourcesContent":["import type {\n  QueryKey,\n  UseQueryOptions,\n  QueryFunction,\n  MutationFunction,\n  UseMutationOptions\n} from '@tanstack/react-query'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ReactNode } from 'react'\nimport React, { useCallback } from 'react'\n\nexport interface ReactQueryAuthConfig<\n  User,\n  LoginCredentials,\n  RegisterCredentials\n> {\n  userFn: QueryFunction<User, QueryKey>\n  loginFn: MutationFunction<User, LoginCredentials>\n  registerFn: MutationFunction<User, RegisterCredentials>\n  logoutFn: MutationFunction<unknown, unknown>\n  userKey?: QueryKey\n}\n\nexport interface AuthProviderProps {\n  children: ReactNode\n}\n\nexport function configureAuth<\n  User,\n  Error,\n  LoginCredentials,\n  RegisterCredentials\n>(config: ReactQueryAuthConfig<User, LoginCredentials, RegisterCredentials>) {\n  const {\n    userFn,\n    userKey = ['authenticated-user'],\n    loginFn,\n    registerFn,\n    logoutFn\n  } = config\n\n  const useUser = (\n    options?: Omit<\n      UseQueryOptions<User, Error, User, QueryKey>,\n      'queryKey' | 'queryFn'\n    >\n  ) =>\n    useQuery({\n      queryKey: userKey,\n      queryFn: userFn,\n      ...options\n    })\n\n  const useLogin = (\n    options?: Omit<\n      UseMutationOptions<User, Error, LoginCredentials>,\n      'mutationFn'\n    >\n  ) => {\n    const queryClient = useQueryClient()\n\n    const setUser = useCallback(\n      (data: User) => queryClient.setQueryData(userKey, data),\n      [queryClient]\n    )\n\n    return useMutation({\n      mutationFn: loginFn,\n      ...options,\n      onSuccess: (user, ...rest) => {\n        setUser(user)\n        options?.onSuccess?.(user, ...rest)\n      }\n    })\n  }\n\n  const useRegister = (\n    options?: Omit<\n      UseMutationOptions<User, Error, RegisterCredentials>,\n      'mutationFn'\n    >\n  ) => {\n    const queryClient = useQueryClient()\n\n    const setUser = useCallback(\n      (data: User) => queryClient.setQueryData(userKey, data),\n      [queryClient]\n    )\n\n    return useMutation({\n      mutationFn: registerFn,\n      ...options,\n      onSuccess: (user, ...rest) => {\n        setUser(user)\n        options?.onSuccess?.(user, ...rest)\n      }\n    })\n  }\n\n  const useLogout = (options?: UseMutationOptions<unknown, Error, unknown>) => {\n    const queryClient = useQueryClient()\n\n    const setUser = useCallback(\n      (data: User | null) => queryClient.setQueryData(userKey, data),\n      [queryClient]\n    )\n\n    return useMutation({\n      mutationFn: logoutFn,\n      ...options,\n      onSuccess: (...args) => {\n        setUser(null)\n        options?.onSuccess?.(...args)\n      }\n    })\n  }\n\n  function AuthLoader({\n    children,\n    renderLoading,\n    renderUnauthenticated,\n    renderError = (error: Error) => <>{JSON.stringify(error)}</>\n  }: {\n    children: ReactNode\n    renderLoading: () => JSX.Element\n    renderUnauthenticated?: () => JSX.Element\n    renderError?: (error: Error) => JSX.Element\n  }) {\n    const { isSuccess, isFetched, status, data, error } = useUser()\n\n    if (isSuccess) {\n      if (renderUnauthenticated && !data) {\n        return renderUnauthenticated()\n      }\n      return <>{children}</>\n    }\n\n    if (!isFetched) {\n      return renderLoading()\n    }\n\n    if (status === 'error') {\n      return renderError(error as Error)\n    }\n\n    return null\n  }\n\n  return {\n    useUser,\n    useLogin,\n    useRegister,\n    useLogout,\n    AuthLoader\n  }\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,eAAAC,EAAAH,GAOA,IAAAI,EAAsD,iCAEtDC,EAAmC,oBAkB5B,SAASH,EAKdI,EAA2E,CAC3E,GAAM,CACJ,OAAAC,EACA,QAAAC,EAAU,CAAC,oBAAoB,EAC/B,QAAAC,EACA,WAAAC,EACA,SAAAC,CACF,EAAIL,EAEEM,EACJC,MAKA,YAAS,CACP,SAAUL,EACV,QAASD,EACT,GAAGM,CACL,CAAC,EAEGC,EACJD,GAIG,CACH,IAAME,KAAc,kBAAe,EAE7BC,KAAU,eACbC,GAAeF,EAAY,aAAaP,EAASS,CAAI,EACtD,CAACF,CAAW,CACd,EAEA,SAAO,eAAY,CACjB,WAAYN,EACZ,GAAGI,EACH,UAAW,CAACK,KAASC,IAAS,CArEpC,IAAAC,EAsEQJ,EAAQE,CAAI,GACZE,EAAAP,GAAA,YAAAA,EAAS,YAAT,MAAAO,EAAA,KAAAP,EAAqBK,EAAM,GAAGC,EAChC,CACF,CAAC,CACH,EAEME,EACJR,GAIG,CACH,IAAME,KAAc,kBAAe,EAE7BC,KAAU,eACbC,GAAeF,EAAY,aAAaP,EAASS,CAAI,EACtD,CAACF,CAAW,CACd,EAEA,SAAO,eAAY,CACjB,WAAYL,EACZ,GAAGG,EACH,UAAW,CAACK,KAASC,IAAS,CA5FpC,IAAAC,EA6FQJ,EAAQE,CAAI,GACZE,EAAAP,GAAA,YAAAA,EAAS,YAAT,MAAAO,EAAA,KAAAP,EAAqBK,EAAM,GAAGC,EAChC,CACF,CAAC,CACH,EAEMG,EAAaT,GAA0D,CAC3E,IAAME,KAAc,kBAAe,EAE7BC,KAAU,eACbC,GAAsBF,EAAY,aAAaP,EAASS,CAAI,EAC7D,CAACF,CAAW,CACd,EAEA,SAAO,eAAY,CACjB,WAAYJ,EACZ,GAAGE,EACH,UAAW,IAAIU,IAAS,CA9G9B,IAAAH,EA+GQJ,EAAQ,IAAI,GACZI,EAAAP,GAAA,YAAAA,EAAS,YAAT,MAAAO,EAAA,KAAAP,EAAqB,GAAGU,EAC1B,CACF,CAAC,CACH,EAEA,SAASC,EAAW,CAClB,SAAAC,EACA,cAAAC,EACA,sBAAAC,EACA,YAAAC,EAAeC,GAAiB,EAAAC,QAAA,gBAAAA,QAAA,cAAG,KAAK,UAAUD,CAAK,CAAE,CAC3D,EAKG,CACD,GAAM,CAAE,UAAAE,EAAW,UAAAC,EAAW,OAAAC,EAAQ,KAAAhB,EAAM,MAAAY,CAAM,EAAIjB,EAAQ,EAE9D,OAAImB,EACEJ,GAAyB,CAACV,EACrBU,EAAsB,EAExB,EAAAG,QAAA,gBAAAA,QAAA,cAAGL,CAAS,EAGhBO,EAIDC,IAAW,QACNL,EAAYC,CAAc,EAG5B,KAPEH,EAAc,CAQzB,CAEA,MAAO,CACL,QAAAd,EACA,SAAAE,EACA,YAAAO,EACA,UAAAC,EACA,WAAAE,CACF,CACF","names":["src_exports","__export","configureAuth","__toCommonJS","import_react_query","import_react","config","userFn","userKey","loginFn","registerFn","logoutFn","useUser","options","useLogin","queryClient","setUser","data","user","rest","_a","useRegister","useLogout","args","AuthLoader","children","renderLoading","renderUnauthenticated","renderError","error","React","isSuccess","isFetched","status"]}